on:
  push:
    branches:
      - "main"

name: Create Release

jobs:
  release-to-production:
    name: Release to Production
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@885641592076c27bfb56c028cd5612cdad63e16d
        with:
          fetch-depth: 0
          token: ${{ secrets.SCOPED_PAT }}

      - name: Setup Node
        uses: actions/setup-node@377c6dae4006fcd73be5aac564ee449b1a5d63f7
        with:
          node-version-file: ".nvmrc"

      - name: Cache Node Modules
        uses: actions/cache@v3.0.11
        id: npm_cache_id
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-cache-
            ${{ runner.os }}-

      - name: Install Dependencies
        if: steps.npm_cache_id.outputs.cache-hit != 'true'
        run: npm ci

      - name: Authorize external workspace
        run: |
          git config --global --add safe.directory /github/workspace

      - name: Did Metadata Change
        uses: rdietrick/did-files-change@12ed863b722bc28052850c22b28a37f38b6eca8d
        id: requires-deploy
        with:
          pathspec: force-app

      - name: Check If Release
        id: check_release
        run: |
          NOTE_FILES=$(git diff --name-only HEAD^ HEAD -- 'release-notes/release.md')
          if [ -z "$NOTE_FILES" ] ; then
            echo ::set-output name=IS_RELEASE::false
          else
            echo ::set-output name=IS_RELEASE::true
          fi

      - name: Install profile decompose sfdx plugin
        if: steps.requires-deploy.outputs.changed == '1'
        run: echo y | npx sf plugins:install @rdietrick/sfdx-profile-decompose

      - name: Authenticate DevHub
        if: steps.requires-deploy.outputs.changed == '1'
        env:
          SALESFORCE_JWT_KEY: ${{ secrets.SALESFORCE_JWT_KEY }}
        run: |
          echo "${SALESFORCE_JWT_KEY}" > server.key
          npx sf org login jwt \
            --client-id ${{ secrets.SALESFORCE_PROD_CLIENT_ID }} \
            --jwt-key-file server.key \
            --username ${{ secrets.SALESFORCE_PROD_USERNAME }} \
            --set-default-dev-hub -a DevHub
          npx sf org display --json -o DevHub > sfdx-auth.json

      - name: Recompose profiles
        if: steps.requires-deploy.outputs.changed == '1' && vars.SALESFORCE_FORMATTED_PROFILES_AND_PERMS == 'false'
        run: |
          npx sf profiles:aggregate
          rm -rf force-app/main/default/profiles/decomposed force-app/main/default/permissionsets/decomposed

      - name: Generate Destructive Changes Param
        if: steps.requires-deploy.outputs.changed == '1'
        id: check_for_destructive_changes
        run: |
          DESTRUCTIVE_FILES_EXIST=true
          if [ -f destructive-changes/destructiveChangesPre.xml ] && [ -f destructive-changes/destructiveChangesPost.xml ]
          then 
            echo "DESTRUCTIVE_FILES=--predestructivechanges destructive-changes/destructiveChangesPre.xml --postdestructivechanges destructive-changes/destructiveChangesPost.xml" >> $GITHUB_OUTPUT;
          elif [ -f destructive-changes/destructiveChangesPre.xml ]
          then 
            echo "DESTRUCTIVE_FILES=--predestructivechanges destructive-changes/destructiveChangesPre.xml" >> $GITHUB_OUTPUT;
          elif [ -f destructive-changes/destructiveChangesPost.xml ]
          then 
            echo "DESTRUCTIVE_FILES=--postdestructivechanges destructive-changes/destructiveChangesPost.xml" >> $GITHUB_OUTPUT;
          else
            DESTRUCTIVE_FILES_EXIST=false
          fi
          if [ "$DESTRUCTIVE_FILES_EXIST" == "true" ]
          then
            RELEASE_DATE=$(TZ=America/Los_Angeles date +'%Y-%m-%d')
            echo "DESTRUCTIVE_CHANGES_CLEANUP_BRANCH=clean-up-destructive-changes-$RELEASE_DATE" >> $GITHUB_OUTPUT;
          fi

      - name: Deploy to Production
        if: steps.requires-deploy.outputs.changed == '1'
        run: |
          npx sf force source manifest create -p force-app -n temp-deploy-manifest
          npx sf project deploy start -o DevHub -x temp-deploy-manifest.xml ${{ steps.check_for_destructive_changes.outputs.DESTRUCTIVE_FILES }} -w ${{ vars.DEPLOYMENT_TIMEOUT }} -l RunLocalTests --ignore-conflicts

      - name: Get Previous Tag
        if: steps.check_release.outputs.IS_RELEASE == 'true' && steps.requires-deploy.outputs.changed == '1'
        id: previous_tag
        uses: WyriHaximus/github-action-get-previous-tag@b95747caec0c7a37825ed29640b4adcb6a8cd3fb
        with:
          fallback: 1.0.0
          prefix: v
        env:
          GITHUB_TOKEN: ${{ secrets.SCOPED_PAT }}

      - name: Get Next Tag Version
        if: steps.check_release.outputs.IS_RELEASE == 'true' && steps.requires-deploy.outputs.changed == '1'
        id: current_tag
        uses: WyriHaximus/github-action-next-semvers@2fc363e72936d52dbd53eaa72f2c2db0d9207707
        with:
          version: ${{ steps.previous_tag.outputs.tag }}

      - name: Get Date
        if: steps.check_release.outputs.IS_RELEASE == 'true' && steps.requires-deploy.outputs.changed == '1'
        id: get_date
        run: |
          TODAYS_DATE=$(date +'%b %d, %Y')
          echo ::set-output name=RELEASE_DATE::$TODAYS_DATE

      - name: Create Release
        if: steps.check_release.outputs.IS_RELEASE == 'true' && steps.requires-deploy.outputs.changed == '1'
        id: create_release
        uses: actions/create-release@c38d3a140cc22e67e265c5d5b6b4888d1f02533f
        env:
          GITHUB_TOKEN: ${{ secrets.SCOPED_PAT }}
        with:
          tag_name: ${{ steps.current_tag.outputs.v_minor }}
          release_name: ${{ steps.get_date.outputs.RELEASE_DATE }} Release
          body_path: release-notes/release.md
          draft: false
          prerelease: false

      - name: Authenticate Template sandbox
        if: steps.requires-deploy.outputs.changed == '1'
        run: |
          echo "${SALESFORCE_TEMPLATE_JWT_SECRET_KEY}" > template-server.key
          npx sf org login jwt \
            --client-id ${{ secrets.SALESFORCE_TEMPLATE_CLIENT_ID }} \
            --jwt-key-file server.key \
            --username ${{ secrets.SALESFORCE_TEMPLATE_USERNAME }} \
            --set-default-dev-hub -a DevHub
          npx sf org display --json -o Template > sfdx-auth.json
        env:
          SALESFORCE_TEMPLATE_JWT_SECRET_KEY: ${{ secrets.SALESFORCE_TEMPLATE_JWT_SECRET_KEY }}

      - name: Update Template sandbox
        if: steps.requires-deploy.outputs.changed == '1'
        run: |
          npx sf force source manifest create -p force-app -n temp-deploy-manifest
          npx sf project deploy start -o Template -x temp-deploy-manifest.xml ${{ steps.check_for_destructive_changes.outputs.DESTRUCTIVE_FILES }} -w ${{ vars.DEPLOYMENT_TIMEOUT }} -l RunLocalTests --ignore-conflicts

      - name: Remove Destructive Change Files
        if: steps.check_for_destructive_changes.outputs.DESTRUCTIVE_CHANGES_CLEANUP_BRANCH != ''
        run: |
          git checkout -b ${{ steps.check_for_destructive_changes.outputs.DESTRUCTIVE_CHANGES_CLEANUP_BRANCH }}
          git clean -fd
          rm -rf destructive-changes

      - name: Commit Destructive Change Cleanup
        if: steps.check_for_destructive_changes.outputs.DESTRUCTIVE_CHANGES_CLEANUP_BRANCH != ''
        uses: stefanzweifel/git-auto-commit-action@75802d269e7721b5146d08f6063ba3097c55ad2b
        with:
          branch: ${{ steps.check_for_destructive_changes.outputs.DESTRUCTIVE_CHANGES_CLEANUP_BRANCH }}
          commit_message: Clean up destructive changes from release

      - name: Create Destructive Change Cleanup Pull Request
        if: steps.check_for_destructive_changes.outputs.DESTRUCTIVE_CHANGES_CLEANUP_BRANCH != ''
        env:
          DESTRUCTIVE_CHANGE_CLEANUP_BRANCH: ${{ steps.check_for_destructive_changes.outputs.DESTRUCTIVE_CHANGES_CLEANUP_BRANCH }}
          GH_TOKEN: ${{ secrets.SCOPED_PAT }}
        run: |
          gh pr create --title "Clean up destructive changes" \
            --body "Please merge \`$DESTRUCTIVE_CHANGE_CLEANUP_BRANCH\` into \`main\` and delete \`$DESTRUCTIVE_CHANGE_CLEANUP_BRANCH\`." \
            -H "$DESTRUCTIVE_CHANGE_CLEANUP_BRANCH" -B main
