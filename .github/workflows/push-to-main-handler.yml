on:
  push:
    branches:
      - "main"

name: Create Release

jobs:
  release-to-production:
    name: Release to Production
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@885641592076c27bfb56c028cd5612cdad63e16d
        with:
          fetch-depth: 0
          token: ${{ secrets.SCOPED_PAT }}

      - name: Setup Node
        uses: actions/setup-node@377c6dae4006fcd73be5aac564ee449b1a5d63f7
        with:
          node-version-file: ".nvmrc"

      - name: Authorize external workspace
        run: |
          git config --global --add safe.directory /github/workspace

      - name: Did Metadata Change
        uses: rdietrick/did-files-change@12ed863b722bc28052850c22b28a37f38b6eca8d
        id: requires-deploy
        with:
          pathspec: force-app

      - name: Check If Release
        id: check_release
        run: |
          NOTE_FILES=$(git diff --name-only HEAD^ HEAD -- 'release-notes/release.md')
          if [ -z "$NOTE_FILES" ] ; then
            echo "IS_RELEASE=false" >> $GITHUB_OUTPUT
          else
            echo "IS_RELEASE=true" >> $GITHUB_OUTPUT
          fi

      - name: Install profile decompose sfdx plugin
        if: steps.requires-deploy.outputs.changed == '1'
        run: echo y | npx sfdx-cli plugins:install @rdietrick/sfdx-profile-decompose

      - name: Authenticate DevHub
        if: steps.requires-deploy.outputs.changed == '1'
        env:
          SALESFORCE_JWT_KEY: ${{ secrets.SALESFORCE_JWT_KEY }}
        run: |
          echo "${SALESFORCE_JWT_KEY}" > server.key
          npx sfdx-cli force:auth:jwt:grant --clientid ${{ secrets.SALESFORCE_CLIENT_ID }} --jwtkeyfile server.key --username ${{ secrets.SALESFORCE_DEVHUB_USERNAME}} --setdefaultdevhubusername -a DevHub
          npx sfdx-cli force:org:display --json -u DevHub > sfdx-auth.json

      - name: Recompose profiles
        if: steps.requires-deploy.outputs.changed == '1' && vars.SALESFORCE_FORMATTED_PROFILES_AND_PERMS == 'false'
        run: |
          npx sfdx-cli profiles:aggregate
          rm -rf force-app/main/default/profiles/decomposed force-app/main/default/permissionsets/decomposed

      - name: Generate Destructive Changes Param
        if: steps.branchFilter.outputs.matches == 'true' && steps.requires-deploy.outputs.changed == '1' && steps.check_first_deploy.outputs.FIRST_DEPLOY == 'true'
        id: check_for_destructive_changes
        run: |
          if [ -f destructive-changes/destructiveChangesPre.xml ] && [ -f destructive-changes/destructiveChangesPost.xml ]
          then 
            echo "DESTRUCTIVE_FILES=--predestructivechanges destructive-changes/destructiveChangesPre.xml --postdestructivechanges destructive-changes/destructiveChangesPost.xml" >> $GITHUB_OUTPUT;
          elif [ -f destructive-changes/destructiveChangesPre.xml ]
          then 
            echo "DESTRUCTIVE_FILES=--predestructivechanges destructive-changes/destructiveChangesPre.xml" >> $GITHUB_OUTPUT;
          elif [ -f destructive-changes/destructiveChangesPost.xml ]
          then 
            echo "DESTRUCTIVE_FILES=--postdestructivechanges destructive-changes/destructiveChangesPost.xml" >> $GITHUB_OUTPUT;
          fi

      - name: Deploy to Production
        if: steps.requires-deploy.outputs.changed == '1'
        run: |
          npx sfdx-cli force:source:manifest:create --sourcepath force-app --manifestname temp-deploy-manifest
          npx sfdx-cli force:source:deploy -u DevHub -x temp-deploy-manifest.xml ${{ steps.check_for_destructive_changes.outputs.DESTRUCTIVE_FILES }} -w 200 -l RunLocalTests

      - name: Get Previous Tag
        if: steps.check_release.outputs.IS_RELEASE == 'true' && steps.requires-deploy.outputs.changed == '1'
        id: previous_tag
        uses: WyriHaximus/github-action-get-previous-tag@b95747caec0c7a37825ed29640b4adcb6a8cd3fb
        with:
          fallback: 1.0.0
          prefix: v
        env:
          GITHUB_TOKEN: ${{ secrets.SCOPED_PAT }}

      - name: Get Next Tag Version
        if: steps.check_release.outputs.IS_RELEASE == 'true' && steps.requires-deploy.outputs.changed == '1'
        id: current_tag
        uses: WyriHaximus/github-action-next-semvers@2fc363e72936d52dbd53eaa72f2c2db0d9207707
        with:
          version: ${{ steps.previous_tag.outputs.tag }}

      - name: Get Date
        if: steps.check_release.outputs.IS_RELEASE == 'true' && steps.requires-deploy.outputs.changed == '1'
        id: get_date
        run: |
          TODAYS_DATE=$(date +'%b %d, %Y')
          echo "RELEASE_DATE=$TODAYS_DATE" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.check_release.outputs.IS_RELEASE == 'true' && steps.requires-deploy.outputs.changed == '1'
        id: create_release
        uses: actions/create-release@c38d3a140cc22e67e265c5d5b6b4888d1f02533f
        env:
          GITHUB_TOKEN: ${{ secrets.SCOPED_PAT }}
        with:
          tag_name: ${{ steps.current_tag.outputs.v_minor }}
          release_name: ${{ steps.get_date.outputs.RELEASE_DATE }} Release
          body_path: release-notes/release.md
          draft: false
          prerelease: false

      - name: Authenticate Template sandbox
        if: steps.requires-deploy.outputs.changed == '1'
        run: |
          echo "${SALESFORCE_TEMPLATE_JWT_SECRET_KEY}" > template-server.key
          npx sfdx-cli force:auth:jwt:grant --clientid ${{ secrets.SALESFORCE_TEMPLATE_CONSUMER_KEY }} --jwtkeyfile template-server.key --username ${{ secrets.SALESFORCE_TEMPLATE_USERNAME}} -a Template --instanceurl https://test.salesforce.com
          npx sfdx-cli force:org:display --json -u Template > sfdx-auth.json
        env:
          SALESFORCE_TEMPLATE_JWT_SECRET_KEY: ${{ secrets.SALESFORCE_TEMPLATE_JWT_SECRET_KEY }}

      - name: Update Template sandbox
        if: steps.requires-deploy.outputs.changed == '1'
        run: |
          npx sfdx-cli force:source:manifest:create --sourcepath force-app --manifestname temp-deploy-manifest
          npx sfdx-cli force:source:deploy -u Template -x temp-deploy-manifest.xml ${{ steps.check_for_destructive_changes.outputs.DESTRUCTIVE_FILES }} -w 200 -l RunLocalTests

      - name: Create PR with cleaned up destructive changes
        if: steps.check_release.outputs.IS_RELEASE == 'true' && steps.requires-deploy.outputs.changed == '1'
        env:
          PAT: ${{ secrets.SCOPED_PAT }}
          USER_EMAIL: ${{ secrets.BOT_USER_EMAIL }}
          USER_NAME: ${{ secrets.BOT_USER_NAME }}
        run: |
          if [ -f destructive-changes/destructiveChanges.xml ] || [ -f destructive-changes/destructiveChangesPre.xml ] || [ -f destructive-changes/destructiveChangesPost.xml ]
          then 
            RELEASE_DATE=$(date +'%Y-%m-%d')
            echo $PAT | gh auth login --with-token
            git config --global user.email "$USER_EMAIL"
            git config --global user.name "$USER_NAME"

            git checkout -b clean-up-destructive-changes-"$RELEASE_DATE" && git push --set-upstream origin clean-up-destructive-changes-"$RELEASE_DATE"
            git rm -r destructive-changes
            git commit -m "Clean up destructive changes from release" && git push

            gh pr create --title "Clean up destructive changes" \
            --body "Please merge \`clean-up-destructive-changes-$RELEASE_DATE\` into \`main\` and delete \`clean-up-destructive-changes-$RELEASE_DATE\`." \
            -H clean-up-destructive-changes-"$RELEASE_DATE" -B main
          fi
